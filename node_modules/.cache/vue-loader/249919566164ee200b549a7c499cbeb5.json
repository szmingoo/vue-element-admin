{"remainingRequest":"C:\\code\\vue-element-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\code\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\code\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\code\\vue-element-admin\\src\\views\\test\\index.vue?vue&type=template&id=f3a85fa2&","dependencies":[{"path":"C:\\code\\vue-element-admin\\src\\views\\test\\index.vue","mtime":1637936283772},{"path":"C:\\code\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\code\\vue-element-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\code\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\code\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}